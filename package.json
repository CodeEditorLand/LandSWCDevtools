{
	"activationEvents": [
		"onCommand:workbench.action.tasks.runTask",
		"onCommand:swc.dev.uiTest.update",
		"onLanguage:rust-ui-test-output",
		"onLanguage:rust",
		"onDebug",
		"workspaceContains:**/Cargo.toml"
	],
	"contributes": {
		"breakpoints": [
			{
				"language": "rust"
			}
		],
		"commands": [
			{
				"category": "Swc",
				"command": "swc.dev.uiTest.update",
				"title": "Update reference"
			},
			{
				"category": "Rust",
				"command": "rust.cratesExplorer.run",
				"icon": {
					"dark": "resources/media/dark/run.svg",
					"light": "resources/media/light/run.svg"
				},
				"title": "Run"
			},
			{
				"category": "Rust",
				"command": "rust.cratesExplorer.debug",
				"icon": {
					"dark": "resources/media/dark/debug.svg",
					"light": "resources/media/light/debug.svg"
				},
				"title": "Debug"
			}
		],
		"debuggers": [
			{
				"configurationAttributes": {
					"launch": {
						"properties": {
							"MIMode": {
								"default": "",
								"description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".\n\n This is ignored if configured rustup toolchain is msvc.",
								"type": "string"
							},
							"args": {
								"default": [],
								"description": "JSON array of command line arguments to pass to the program when it is launched. Example [\"arg1\", \"arg2\"].",
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"coreDumpPath": {
								"default": "",
								"description": "Optional full path to a core dump file for the specified program. Defaults to null.",
								"type": "string"
							},
							"crate": {
								"decsription": "Crate name.",
								"default": "",
								"type": "string"
							},
							"cwd": {
								"default": ".",
								"description": "The working directory of the target",
								"type": "string"
							},
							"debugServerArgs": {
								"default": "",
								"description": "Optional debug server args. Defaults to null.",
								"type": "string"
							},
							"debugServerPath": {
								"default": "",
								"description": "Optional full path to debug server to launch. Defaults to null.",
								"type": "string"
							},
							"env": {
								"default": {},
								"description": "Environment variables to add to the environment for the program. Example: { \"RUST_LOG\": \"debug\" }.",
								"properties": {
									"name": "string",
									"value": "string"
								},
								"type": "object"
							},
							"externalConsole": {
								"default": "false",
								"description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
								"type": "boolean"
							},
							"filterStderr": {
								"default": "false",
								"description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
								"type": "boolean"
							},
							"filterStdout": {
								"default": "true",
								"description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
								"type": "boolean"
							},
							"launchCompleteCommand": {
								"default": "exec-run",
								"description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
								"enum": [
									"exec-run",
									"exec-continue",
									"None"
								]
							},
							"logging": {
								"default": {},
								"description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
								"properties": {
									"engineLogging": {
										"default": false,
										"description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
										"type": "boolean"
									},
									"exceptions": {
										"default": true,
										"description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
										"type": "boolean"
									},
									"moduleLoad": {
										"default": true,
										"description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
										"type": "boolean"
									},
									"programOutput": {
										"default": true,
										"description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
										"type": "boolean"
									},
									"trace": {
										"default": false,
										"description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
										"type": "boolean"
									},
									"traceResponse": {
										"default": false,
										"description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"miDebuggerPath": {
								"default": "",
								"description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
								"type": "string"
							},
							"miDebuggerServerAddress": {
								"default": "serveraddress:port",
								"description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
								"type": "string"
							},
							"pipeTransport": {
								"default": {
									"debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb",
									"pipeArgs": [],
									"pipeCwd": "${workspaceRoot}",
									"pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
								},
								"description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
								"properties": {
									"debuggerPath": {
										"default": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
										"description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
										"type": "string"
									},
									"pipeArgs": {
										"default": [],
										"description": "Command line arguments passed to the pipe program to configure the connection.",
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"pipeCwd": {
										"default": "/usr/bin",
										"description": "The fully qualified path to the working directory for the pipe program.",
										"type": "string"
									},
									"pipeEnv": {
										"additionalProperties": {
											"type": "string"
										},
										"default": {},
										"description": "Environment variables passed to the pipe program.",
										"type": "object"
									},
									"pipeProgram": {
										"default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
										"description": "The fully qualified pipe command to execute.",
										"type": "string"
									}
								},
								"type": "object"
							},
							"pretty": {
								"default": true,
								"description": "Enable pretty priting. Enabled by default.",
								"type": "boolean"
							},
							"serverLaunchTimeout": {
								"default": "10000",
								"description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
								"type": "integer"
							},
							"serverStarted": {
								"default": "",
								"description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
								"type": "string"
							},
							"setupCommands": {
								"default": [],
								"description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].\n\nNote that recommended way to enable pretty printing is specifying \"pretty: true,\" instead of using this",
								"items": {
									"properties": {
										"description": {
											"default": "",
											"description": "Optional description for the command.",
											"type": "string"
										},
										"ignoreFailures": {
											"default": "false",
											"description": "If true, failures from the command should be ignored. Default value is false.",
											"type": "boolean"
										},
										"text": {
											"default": "",
											"description": "The debugger command to execute.",
											"type": "string"
										}
									},
									"type": "object"
								},
								"type": "array"
							},
							"showDisplayString": {
								"default": "true",
								"description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
								"type": "boolean"
							},
							"sourceFileMap": {
								"default": {
									"<source-path>": "<target-path>"
								},
								"description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
								"type": "object"
							},
							"stopOnEntry": {
								"default": true,
								"description": "Automatically stop after launch.",
								"type": "boolean"
							},
							"targets": {
								"decsription": "e.g. ",
								"default": "",
								"type": "string"
							},
							"visualizerFile": {
								"default": "",
								"description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
								"type": "string"
							}
						},
						"required": [
							"crate"
						]
					}
				},
				"configurationSnippets": [
					{
						"body": {
							"name": "${2:Launch Program}",
							"program": "^\"\\${workspaceFolder}/${1:Program}\"",
							"request": "launch",
							"type": "rust"
						},
						"description": "A new configuration for launching a mock debug program",
						"label": "rust: Launch (GDB / LLDB / VSDebug)"
					}
				],
				"label": "rust: Launch (GDB / LLDB / VSDebug)",
				"type": "rust"
			}
		],
		"languages": [
			{
				"aliases": [
					"Rust ui test"
				],
				"extensions": [
					".stdout",
					".stderr"
				],
				"id": "rust-ui-test-output"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "swc.dev.uiTest.update",
					"when": "resourceLangId == rust-ui-test-output"
				}
			],
			"editor/title": [
				{
					"command": "swc.dev.uiTest.update",
					"group": "navigation",
					"when": "resourceLangId == rust-ui-test-output"
				}
			],
			"view/item/context": [
				{
					"command": "rust.cratesExplorer.run",
					"group": "testExplorer@0",
					"when": "view == cratesExplorer && viewItem != crate && viewItem != lib && viewItem != deps && viewItem != examples"
				},
				{
					"command": "rust.cratesExplorer.debug",
					"group": "testExplorer@1",
					"when": "view == cratesExplorer && viewItem != crate && viewItem != lib && viewItem != deps && viewItem != examples && viewItem != testFiles && viewItem != benchFiles"
				}
			],
			"view/title": [
				{
					"command": "rust.cratesExplorer.run",
					"group": "navigation@0",
					"when": "view == cratesExplorer && viewItem != crate && viewItem != lib && viewItem != deps && viewItem != examples"
				},
				{
					"command": "rust.cratesExplorer.debug",
					"group": "navigation@1",
					"when": "view == cratesExplorer && viewItem != crate && viewItem != lib && viewItem != deps && viewItem != examples && viewItem != testFiles && viewItem != benchFiles"
				}
			]
		},
		"taskDefinitions": [
			{
				"properties": {
					"crate": {
						"description": "Name of the crate",
						"type": "string"
					},
					"task": {
						"description": "The cargo task to customize",
						"type": "string"
					}
				},
				"required": [
					"task"
				],
				"type": "cargo"
			}
		],
		"views": {
			"explorer": [
				{
					"id": "cratesExplorer",
					"name": "Crates",
					"when": "isCargoProject"
				}
			]
		}
	},
	"dependencies": {
		"glob": "11.0.0",
		"jsonstream": "1.0.3",
		"which": "5.0.0"
	},
	"description": "",
	"devDependencies": {
		"@types/glob": "8.1.0",
		"@types/jsonstream": "0.8.33",
		"@types/node": "22.7.5",
		"@types/which": "3.0.4"
	},
	"displayName": "swc developement",
	"extensionDependencies": [
		"ms-vscode.cpptools",
		"rust-lang.rust"
	],
	"main": "./out/extension",
	"name": "swc-dev",
	"preview": true,
	"scripts": {
		"compile": "tsc -p ./"
	}
}
